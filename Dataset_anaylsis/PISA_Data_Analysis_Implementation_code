# PISA Data Analysis Implementation
import pandas as pd
import numpy as np
from scipy import stats
import statsmodels.api as sm
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

class PISAAnalyzer:
    def __init__(self, data_path):
        """Initialize PISA data analyzer"""
        self.data = pd.read_csv(data_path)
        self.scaler = StandardScaler()
        
    def preprocess_pisa_data(self):
        """Preprocess PISA dataset"""
        # Handle missing values
        self.data = self.data.fillna(self.data.mean())
        
        # Create well-being indicators
        wellbeing_cols = [
            'life_satisfaction',
            'sense_belonging',
            'bullying_exposure',
            'achievement_motivation'
        ]
        
        # Standardize metrics
        self.data[wellbeing_cols] = self.scaler.fit_transform(
            self.data[wellbeing_cols]
        )
        
        return self.data
    
    def calculate_country_metrics(self):
        """Calculate country-level metrics"""
        country_metrics = {}
        
        for country in self.data['country'].unique():
            country_data = self.data[self.data['country'] == country]
            
            metrics = {
                'life_satisfaction': country_data['life_satisfaction'].mean(),
                'belonging_score': country_data['sense_belonging'].mean(),
                'well_being_index': self._calculate_wellbeing_index(country_data),
                'percentile_ranks': self._calculate_percentile_ranks(country_data)
            }
            
            country_metrics[country] = metrics
        
        return country_metrics
    
    def _calculate_wellbeing_index(self, country_data):
        """Calculate composite well-being index"""
        wellbeing_components = [
            'life_satisfaction',
            'sense_belonging',
            'bullying_exposure',
            'achievement_motivation'
        ]
        
        # Apply PCA for dimension reduction
        pca = PCA(n_components=1)
        wellbeing_score = pca.fit_transform(
            country_data[wellbeing_components]
        )
        
        return float(wellbeing_score.mean())
    
    def _calculate_percentile_ranks(self, country_data):
        """Calculate percentile ranks for key metrics"""
        metrics = ['life_satisfaction', 'sense_belonging']
        ranks = {}
        
        for metric in metrics:
            ranks[metric] = stats.percentileofscore(
                self.data[metric],
                country_data[metric].mean()
            )
            
        return ranks
    
    def analyze_temporal_trends(self, years):
        """Analyze trends across multiple PISA cycles"""
        trend_data = {
            'year': [],
            'country': [],
            'wellbeing_score': [],
            'achievement_score': []
        }
        
        for year in years:
            year_data = self.data[self.data['year'] == year]
            
            for country in year_data['country'].unique():
                country_year_data = year_data[
                    year_data['country'] == country
                ]
                
                trend_data['year'].append(year)
                trend_data['country'].append(country)
                trend_data['wellbeing_score'].append(
                    self._calculate_wellbeing_index(country_year_data)
                )
                trend_data['achievement_score'].append(
                    country_year_data['achievement_score'].mean()
                )
        
        return pd.DataFrame(trend_data)

# Example usage:
pisa_analyzer = PISAAnalyzer('path/to/pisa_data.csv')
processed_data = pisa_analyzer.preprocess_pisa_data()
country_metrics = pisa_analyzer.calculate_country_metrics()
temporal_trends = pisa_analyzer.analyze_temporal_trends([2018, 2019, 2020, 2021, 2022])
